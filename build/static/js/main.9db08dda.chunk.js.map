{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["handleKeyDown","evt","setLetter","console","log","keyCode","letter","String","fromCharCode","charCode","utterance","SpeechSynthesisUtterance","Promise","resolve","reject","id","synth","window","speechSynthesis","setInterval","getVoices","length","clearInterval","then","voices","voice","filteredVoices","filter","v","lang","Date","now","getVoice","speak","colors","App","useState","currentLetter","useEffect","addEventListener","throttle","className","style","display","flexDirection","alignItems","justifyContent","fontSize","textShadow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wOAkBA,SAASA,EAAcC,EAAKC,GAE1B,GADAC,QAAQC,IAAIH,EAAII,SAGbJ,EAAII,SAAW,IAAMJ,EAAII,SAAW,IAEpCJ,EAAII,SAAW,IAAMJ,EAAII,SAAW,IAEpCJ,EAAII,SAAW,IAAMJ,EAAII,SAAW,IACrC,CACA,IAAMC,EAASC,OAAOC,aAAaP,EAAII,SAAWJ,EAAIQ,UACtDP,EAAUI,GACV,IAAII,EAAY,IAAIC,yBAAyBL,GAC7C,OA1BK,IAAIM,SAAQ,SAASC,EAASC,GACnC,IACIC,EADAC,EAAQC,OAAOC,gBAGnBH,EAAKI,aAAY,WACkB,IAA7BH,EAAMI,YAAYC,SACpBR,EAAQG,EAAMI,aACdE,cAAcP,MAEf,OAiBgBQ,MAAK,SAAAC,GAGtB,OAFAd,EAAUe,MAOhB,SAAkBD,GAChB,IAAIE,EAAiBF,EAAOG,QAAO,SAAAC,GAAC,MAAe,UAAXA,EAAEC,QAC1C,OAAOH,EAAeI,KAAKC,MAAQL,EAAeL,QAT5BW,CAASR,GAC3BP,OAAOC,gBAAgBe,MAAMvB,GACtBT,MAUb,IAAMiC,EAAS,CAAC,MAAO,SAAU,SAAU,QAAS,OAAQ,SAAU,UA0CvDC,MApCf,WAAgB,IAAD,EACsBC,mBAAS,MAD/B,mBACNC,EADM,KACSnC,EADT,KAUb,OAPAoC,qBAAU,WACRrB,OAAOsB,iBACL,UACAC,oBAAS,SAAAvC,GAAG,OAAID,EAAcC,EAAKC,KAAY,QAEhD,IAGD,yBAAKuC,UAAU,OACb,yBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,WAGlB,+CACCT,GACC,yBACEK,MAAO,CACLK,SAAU,IACVC,WAAW,kBAAD,OA5Bfd,EAAOJ,KAAKC,MAAQG,EAAOb,WA+BvBgB,MClEOY,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,a","file":"static/js/main.9db08dda.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { throttle } from \"lodash\";\nimport \"./App.css\";\n\nfunction setSpeech() {\n  return new Promise(function(resolve, reject) {\n    let synth = window.speechSynthesis;\n    let id;\n\n    id = setInterval(() => {\n      if (synth.getVoices().length !== 0) {\n        resolve(synth.getVoices());\n        clearInterval(id);\n      }\n    }, 10);\n  });\n}\n\nfunction handleKeyDown(evt, setLetter) {\n  console.log(evt.keyCode)\n  if (\n    // Numbers\n    (evt.keyCode >= 48 && evt.keyCode <= 57) ||\n    // Uppercase\n    (evt.keyCode >= 65 && evt.keyCode <= 90) ||\n    // Lowercase\n    (evt.keyCode >= 97 && evt.keyCode <= 122)\n  ) {\n    const letter = String.fromCharCode(evt.keyCode || evt.charCode);\n    setLetter(letter);\n    let utterance = new SpeechSynthesisUtterance(letter);\n    return setSpeech().then(voices => {\n      utterance.voice = getVoice(voices);\n      window.speechSynthesis.speak(utterance);\n      return evt;\n    });\n  }\n}\n\nfunction getVoice(voices) {\n  let filteredVoices = voices.filter(v => v.lang === \"en-US\");\n  return filteredVoices[Date.now() % filteredVoices.length];\n}\n\nconst colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"];\n\nfunction getColor() {\n  return colors[Date.now() % colors.length];\n}\n\nfunction App() {\n  const [currentLetter, setLetter] = useState(null);\n\n  useEffect(() => {\n    window.addEventListener(\n      \"keydown\",\n      throttle(evt => handleKeyDown(evt, setLetter), 500)\n    );\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        }}\n      >\n        <div>Type a letter!</div>\n        {currentLetter && (\n          <div\n            style={{\n              fontSize: 600,\n              textShadow: `10px 10px 15px ${getColor()}`\n            }}\n          >\n            {currentLetter}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}